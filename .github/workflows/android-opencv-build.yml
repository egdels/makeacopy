name: Android Build (mit OpenCV NDK)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Android SDK NDK 29.0.13599879
        run: |
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_HOME} "ndk;29.0.13599879"
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}

      - name: Check NDK path
        run: ls -l $ANDROID_HOME/ndk

      # Build OpenCV native libraries from source
      - name: Fetch OpenCV sources
        run: |
          chmod +x scripts/fetch_opencv.sh
          ./scripts/fetch_opencv.sh

      - name: Build OpenCV native libraries
        run: |
          chmod +x scripts/build_opencv_android.sh
          ./scripts/build_opencv_android.sh

      - name: Prepare OpenCV for app
        run: |
          chmod +x scripts/prepare_opencv.sh
          ./scripts/prepare_opencv.sh

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode Keystore
        env:
          ENCODED_KEYSTORE: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          if [ -n "$ENCODED_KEYSTORE" ]; then
            echo "$ENCODED_KEYSTORE" | base64 --decode > app/keystore.jks
            echo "Keystore decoded successfully"
          else
            echo "No keystore provided, will build unsigned APK"
            exit 1
          fi

      - name: Update version in build.gradle for GitHub release
          run: |
            # Update both versionCode and versionName for GitHub builds
            sed -i "s/versionCode [0-9]*/versionCode ${{ steps.extract_version.outputs.VERSION_CODE }}/" app/build.gradle
            sed -i "s/versionName \"[^\"]*\"/versionName \"${{ steps.extract_version.outputs.VERSION }}\"/" app/build.gradle
        

      - name: Build Release APK and Bundle
        run: |
          ./gradlew assembleRelease bundleRelease \
          -PSIGNING_KEY_ALIAS="${SIGNING_KEY_ALIAS}" \
          -PSIGNING_KEY_PASSWORD="${SIGNING_KEY_PASSWORD}" \
          -PSIGNING_STORE_PASSWORD="${SIGNING_STORE_PASSWORD}"
          # Rename outputs with version
          mv app/build/outputs/apk/release/app-release.apk \
          app/build/outputs/apk/release/SambaLite-v${{ steps.extract_version.outputs.VERSION }}-release.apk
          mv app/build/outputs/bundle/release/app-release.aab \
          app/build/outputs/bundle/release/SambaLite-v${{ steps.extract_version.outputs.VERSION }}-release.aab
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
      
      # Verify signing
      - name: Verify APK signature
        run: |
          # Using aapt to verify the APK is signed
          aapt dump badging app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk | head -1
          echo "APK verification completed"

      - name: Generate checksums
        run: |
          cd app/build/outputs/apk/release/
          sha256sum MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk > MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk.sha256
          cd ../../bundle/release/
          sha256sum MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab > MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab.sha256

